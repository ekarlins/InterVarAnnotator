#!/usr/bin/python

rule annotate_vcf_chunk:
    input:
        vcf = 'sorted_min_rep_vcf_chunks/{chunk}.vcf',
        av = 'avinput/{chunk}.avinput',
        intervar = 'InterVar_chunks/{chunk}.InterVarOutput.hg19_multianno.txt.intervar'
    output:
        'annotated_vcf_chunk/{chunk}.vcf'
    run:
        vcfToAvDict = makeVcfToAvDict(input.av)
        interVarDict = makeIntervarDict(input.intervar)
        with open(input.vcf) as f, open(output[0], 'w') as out:
            line = f.readline()
            while not line.startswith('#CHROM'):
                out.write(line)
                line = f.readline()
            out.write('##INFO=<ID=InterVar,Number=.,Type=String,Description="InterVar predicted pathogenicity for each overlapping gene">\n')
            out.write(line)
            line = f.readline()
            while line != '':
                line_list = line.split()
                (chrom, pos, snp, ref, alt) = line_list[:5]
                vcfId = '_'.join([chrom, pos, ref, alt])
                avId = vcfToAvDict[vcfId]
                geneDict = interVarDict[avId]
                predictions = []
                for gene in sorted(geneDict.keys()):
                    predict = geneDict[gene]
                    predictions.append(gene + ':' + predict)
                interVar = 'InterVar=' + '|'.join(predictions)
                info = line_list[7]
                line_list[7] = info + ';' + interVar
                line = f.readline()


rule cat_annotated_vcf_chunks:
    input:
        expand('annotated_vcf_chunk/{chunk}.vcf', chunk = CHUNKS)
    output:
        'InterVar_annotated.vcf'
    run:
        with open(output[0], 'w') as out:
            with open('annotated_vcf_chunk/' + CHUNKS[0] + '.vcf') as f:
                for line in f:
                    out.write(line)
            for chunk in CHUNKS[1:]:
                with open('annotated_vcf_chunk/' + chunk + '.vcf') as f:
                    line = f.readline()
                    while line[0] == '#':
                        line = f.readline()
                    while line != '':
                        out.write(line)
                        line = f.readline()


rule bgzip_annotated_vcf:
    input:
        'InterVar_annotated.vcf'
    output:
        'InterVar_annotated.vcf.gz'
    params:
        module = 'module load tabix/0.2.6'
    shell:
        '{params.module};bgzip {input}'

rule tabix_annotated_vcf:
    input:
        'InterVar_annotated.vcf.gz'
    output:
        'InterVar_annotated.vcf.gz.tbi'
    params:
        module = 'module load tabix/0.2.6'
    shell:
        '{params.module};tabix -p vcf {input}'

