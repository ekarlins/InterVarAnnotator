#!/usr/bin/python

rule subset_vcf:
    input:
        vcf
    output:
        'vcf_chunks/{chunk}.vcf'
    params:
        module = 'module load python/2.7'
    run:
        (chrom, start, end) = wildcards.chunk.split('.')
        shell('{params.module};python scripts/subsetVcf.py {input} {output} ' + chrom + ' ' + start + ' ' + end)


rule split_multiallelic:
    input:
        'vcf_chunks/{chunk}.vcf'
    output:
        'split_multiallelic_vcf_chunks/{chunk}.vcf'
    params:
        module = 'module load vcflib/v1.0.0-rc0-331-g7e3d806'
    shell:
        '{params.module};vcfbreakmulti {input} > {output}'


rule left_align_trim:
    input:
        'split_multiallelic_vcf_chunks/{chunk}.vcf'
    output:
        'left_align_trim/{chunk}.vcf'
    params:
        module = 'module load GATK/3.8-0',
        ref = config['REF']
    shell:
        '{params.module};GATK -m 4g LeftAlignAndTrimVariants -R {params.ref} --variant {input} -o {output}'

rule sort_min_rep_vcf:
    input:
        'left_align_trim/{chunk}.vcf'
    output:
        'sorted_min_rep_vcf_chunks/{chunk}.vcf'
    params:
        module = 'module load igvtools/2.3.98'
    shell:
        '{params.module};java -Xmx9g -Djava.awt.headless=true -jar $IGVTOOLSHOME/igvtools.jar sort -m 100000 -t $TMPDIR {input} {output}'


rule rename_info:
    input:
        'sorted_min_rep_vcf_chunks/{chunk}.vcf'
    output:
        vcf = 'info_renamed_vcf_chunks/{chunk}.vcf',
        av = 'av_warning_variants/{chunk}.avinput'
    run:
        with open(input[0]) as f, open(output.vcf, 'w') as out, open(output.av, 'w') as avOut:
            line = f.readline()
            while not line.startswith('#CHROM'):
                out.write(line)
                line = f.readline()
            line_list = line.split()
            out.write('\t'.join(line_list[:8]) + '\n')
            line = f.readline()
            while line != '':
                line_list = line.split()
                (chrom, pos, snp, ref, alt) = line_list[:5]
                newId = '_'.join([chrom, pos, ref, alt])
                line_list[7] = newId
                out.write('\t'.join(line_list[:8]) + '\n')
                if alt == '.':
                    end = str(int(pos) + len(ref) - 1)
                    avOut.write('\t'.join([chrom, pos, end, ref, ref] + line_list[:8]) + '\n')
                line = f.readline()


